import sys

# --- Configuration ---
# This must match the key in your C and verification scripts.
XOR_KEY = 0x42

# This is the definitive list of process names in the exact order you need.
# It has been extracted from the 'processData' struct you provided.
PROCESS_NAMES = [
    "MsMpEng.exe",
    "MsSense.exe",
    "SenseIR.exe",              # Was incorrectly pointing to senseCnc.exe's data
    "SenseNdr.exe",             # Was incorrectly pointing to sensedr.exe's data
    "SenseCncProxy.exe",        # Was incorrectly pointing to senseCncProxy.exe's data
    "SenseSampleUploader.exe",  # Was incorrectly pointing to senseSampleUploader.exe's data
    "HealthService.exe",
    "MonitoringHost.exe",
    "MpCmdRun.exe",
    "winlogbeat.exe",
    "elastic-agent.exe",
    "elastic-endpoint.exe",
    "filebeat.exe",
    "xagt.exe",
    "QualysAgent.exe",
    "SentinelAgent.exe",
    "SentinelAgentWorker.exe",
    "SentinelServiceHost.exe",
    "SentinelStaticEngine.exe",
    "LogProcessorService.exe",
    "SentinelStaticEngineScanner.exe",
    "SentinelUI.exe",
    "SentinelStaticEnginePatcher.exe",
    "SentinelBrowserNativeHost.exe",
    "SentinelRemediation.exe",
    "SentinelHelperService.exe",
    "SentinelRemoteShell.exe",
    "SentinelRemoteShellHost.exe",
    "SentinelScanFromContextMenu.exe",
    "cb.exe",
    "cbsensor.exe",
    "cbdaemon.exe",
    "cban.exe",
    "cbpsc.exe",
    "cbcomms.exe",
    "carbonblack.exe",
    "cbcloud.exe",
    "cbt.exe",
    "RepUtils.exe",
    "RepUx.exe",
    "RepSvc.exe",
    "RepCLI.exe",
    "CbDefense.exe",
    "CbDefense-Audit.exe",
    "CbDefense-Recorder.exe",
    "CbDefense-Sensor.exe",
    "CbDefense-Service.exe",
    "CbDefense-UI.exe",
    "csagent.exe",
    "csfalcon.exe",
    "csfalconservice.exe",
    "csconnector.exe",
    "ekrn.exe",
    "ehurukai.exe",
    "endgame.exe",
    "esensor.exe",
    "eamsi.exe",
    "epp.exe",
    "eppservice.exe",
    "eppconsole.exe",
    "eppremediate.exe",
    "eadr.exe",
    "edpa.exe",
    "wdp.exe",
    "4m.exe",
    "wsctrlsvc.exe",
    "hips4ray.exe",
    "hipsdaemon.exe",
    "mfemms.exe",
    "mfeann.exe",
    "mfecanary.exe",
    "mfeelam.exe",
    "mfeens.exe",
    "mfeesp.exe",
    "mfefire.exe",
    "mfehcs.exe",
    "mfehidin.exe",
    "mcafee diagnose scan.exe",
    "mc fab.exe",
    "mc feedback.exe",
    "mcinst.exe",
    "mclogs.exe",
    "mc-fw-host.exe",
    "mc-inst-ui.exe",
    "mc-neo-a-host.exe",
    "mc-neo-w-host.exe",
    "mc-neo-host.exe",
    "mc-mp-host.exe",
    "mcnetcfg.exe",
    "mcnetman.exe",
    "mcrepair.exe",
    "mcscan.exe",
    "mcshell.exe",
    "mcshield.exe",
    "mctp.exe",
    "mcupd.exe",
    "mcuihost.exe",
    "mcuicnt.exe",
    "mcvs.exe",
    "mcvsscn.exe",
    "mcsafe.exe",
    "mcsclog.exe",
    "mcscreencapture.exe",
    "mcsync.exe",
    "mccep.exe",
    "mccepbrw.exe",
    "mfehidin.exe",
    "mfehidin.exe",
    "mfetp.exe",
    "mfeamcin.exe",
    "mfeaps.exe",
    "mfeavsvc.exe",
    "mfeskin.gr.exe",
    "360SPTool.exe",
    "360taskmgr.exe",
    "360Toasts.exe",
    "360UDisk.exe",
    "360WD.exe",
    "360WebDeff.exe",
    "360leakfix.exe",
    "360LeakRepair.exe",
    "360NetRepair.exe",
    "360Netman.exe",
    "360ain.exe",
    "360dump.exe",
    "360insthelper.exe",
    "360rp.exe",
    "360safe.exe",
    "360safetray.exe",
    "360sd.exe",
    "360sdup.exe",
    "360sdrun.exe",
    "360sdtooldata.exe",
    "360sec.exe",
    "360secext.exe",
    "repair.exe",
    "soft.gr.exe",
    "soft.gr.exe",
    "softup.notify.exe",
    "SuperKiller.exe",
    "WDSafeDown.exe",
    "WscControl.exe",
    "ZhuDongFangYu.exe",
    "Symantec.exe",
    "SymantecAgent.exe",
    "SymantecUI.exe",
    "Symantec Antivirus.exe",
    "Symantec Endpoint Protection.exe",
    "zhongshenlong.exe",
    "avg.exe",
    "avast.exe",
    "bitdefender.exe",
    "kaspersky.exe",
    "sophos.exe",
    "trend micro.exe",
    "eset.exe",
    "f-secure.exe",
    "panda.exe",
    "webroot.exe",
    "norton.exe",
    "mcafee.exe",
    "cylance.exe",
    "crowdstrike.exe",
    "hwsd.exe"
]

def generate_c_code():
    """
    Encrypts the process names and prints them in a complete, ready-to-use
    C source file format to standard output.
    """
    c_definitions = []
    struct_entries = []

    print("// This file was auto-generated by generate_encryption.py", file=sys.stderr)
    print("// To update, modify the PROCESS_NAMES list in the script and re-run.", file=sys.stderr)

    # Use a dictionary to track unique plaintext names and their corresponding variable names.
    # This handles cases where the same process name appears multiple times in the list.
    unique_names_map = {}
    
    # First pass: Generate byte array definitions only for unique names
    for i, name in enumerate(PROCESS_NAMES):
        if name.lower() not in unique_names_map:
            var_name = f"data_{len(unique_names_map)}"
            unique_names_map[name.lower()] = var_name
            
            encrypted_bytes = [ord(char) ^ XOR_KEY for char in name]
            hex_string = ", ".join([f"0x{b:02x}" for b in encrypted_bytes])
            
            c_definitions.append(f"const unsigned char {var_name}[] = {{ {hex_string} }}; // {name}")

    # Second pass: Generate the struct entries in the correct order
    for name in PROCESS_NAMES:
        var_name = unique_names_map[name.lower()]
        struct_entries.append(f"    {{ {var_name}, sizeof({var_name}) }},   // {name}")

    # --- Print the final C code to the console ---
    
    print('#include "process.h"')
    print('// --- Auto-generated Encrypted Process Names ---')
    print('\n'.join(c_definitions))
    print('')
    print('// The array of structs pointing to the encrypted data.')
    print('struct EncryptedString processData[] = {')
    print('\n'.join(struct_entries))
    print('};')
    print('')
    print('const size_t PROCESS_DATA_COUNT = sizeof(processData) / sizeof(processData[0]);')
    print('')

if __name__ == "__main__":
    generate_c_code()